generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  SUPER_ADMIN
  CASHER
  WAITER
  OWNER
}

enum OrderStatus {
  PENDING
  PAID
  DEBT
}

enum WithdrawType {
  INCOME
  OUTCOME
}

enum RestaurantType {
  FAST_FOOD
  CAFE
  RESTAURANT
  PIZZERIA
  SUSHI_BAR
  OTHER
}

model Region {
  id         String       @id @default(uuid())
  name       String       @unique
  user       User[]
  restaurant Restaurant[]
  createdAt  DateTime     @default(now())
}

model User {
  id       String   @id @default(uuid())
  name     String
  phone    String   @unique
  role     RoleType
  password String
  balans   Float    @default(0)

  regionId     String?
  Region       Region?     @relation(fields: [regionId], references: [id])
  restaurantId String?
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  Orders       Order[]     @relation("OrderToWaiter")

  createdAt DateTime @default(now())
}

model Restaurant {
  id       String  @id @default(uuid())
  name     String  @unique
  tip      Float
  type     RestaurantType @default(RESTAURANT)
  address  String
  phone    String
  isActive Boolean @default(true)
  balance  Float   @default(0)

  Products   Product[]
  Categories Category[]
  Orders     Order[]
  Withdraws  Withdraw[]
  Debts      Debt[]
  Users      User[]

  Region   Region? @relation(fields: [regionId], references: [id])
  regionId String?

  createdAt DateTime @default(now())
}

model Category {
  id       String  @id @default(uuid())
  name     String  @unique
  isActive Boolean @default(true)

  Products Product[]

  restaurantId String?
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])

  createdAt DateTime @default(now())
}

model Product {
  id       String  @id @default(uuid())
  name     String
  price    Float
  isActive Boolean @default(true)

  OrderItem OrderItem[]

  restaurantId String?
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  categoryId   String?
  Category     Category?   @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
}

model Order {
  id     String      @id @default(uuid())
  table  String
  total  Float       @default(0)
  status OrderStatus @default(PENDING)

  Debts     Debt[]
  Withdraws Withdraw[]

  restaurantId String?
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  waiterId    String?
  Waiter      User?       @relation("OrderToWaiter", fields: [waiterId], references: [id])
  OrderItems  OrderItem[] @relation("OrderToOrderItems")

  createdAt DateTime @default(now())
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int

  orderId   String
  order     Order   @relation("OrderToOrderItems", fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
}

model Withdraw {
  id          String       @id @default(uuid())
  type        WithdrawType
  amount      Float
  description String?

  restaurantId String?
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  orderId      String?
  Order        Order?      @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
}

model Debt {
  id       String @id @default(uuid())
  username String
  amount   Float

  restaurantId String?
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  orderId      String?
  Order        Order?      @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
}


